{"version":3,"sources":["no-image.png","vs.png","pop2.png","config.js","components/movie/Card.js","components/Discover.js","components/Popular.js","components/MyList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","config","Card","_this","this","image","props","movie","poster_path","placeholder","concat","react_default","a","createElement","className","onClick","id","title","src","alt","React","Component","TODAY","moment","format","NEXT_WEEK","add","Discover","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","movies","onClickMovie","bind","assertThisInitialized","_this2","url","fetch","then","res","json","data","console","log","setState","results","movieId","saveToLocalStorage","storageStr","localStorage","getItem","myList","JSON","parse","includes","push","setItem","stringify","_this3","map","index","key","components_movie_Card","Popular","currentMovie","displayedMov","slice","vs","MyList","moviesList","listOfIds","getFromLocalStorage","onClickCard","Promise","all","fetchMovie","forEach","filteredItems","filter","Id","filteredMovies","App","react_router_dom","to","react_router","path","exact","component","pop2","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7cf93a53.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no-image.b6c1e99a.png\";","module.exports = __webpack_public_path__ + \"static/media/vs.9bf191e9.png\";","module.exports = __webpack_public_path__ + \"static/media/pop2.73692655.png\";","export default {\n  API_KEY: \"api_key=0da4cec8cd7c7f9e6892097255ca707c\"\n};","import React from 'react';\nimport './Card.css';\nimport placeholder from '../../no-image.png' //Image par défaut dans le cas ou l'APi n'en fournirait pas\n\nclass Card extends React.Component {\n  render() {\n    // Ceci définit une image par défaut si jamais l'api ne fournit pas d'image\n    const image = this.props.movie.poster_path === null ? placeholder : `https://image.tmdb.org/t/p/w300${this.props.movie.poster_path}`;\n    // console.log(this.props.movie.title)\n    return(\n      <button className=\"btn btn-outline-danger my-card\" onClick = {() => this.props.onClick(this.props.movie.id)}>\n        <div className=\"title\">\n          <h5>{this.props.movie.title}</h5>\n        </div>\n        <div>\n          <img className=\"img-fluid rounded\" src={`${image}`} alt={`${this.props.movie.title}`}/>\n        </div>\n      </button>\n    )\n  }\n}\n\nexport default Card;","import React from 'react';\nimport moment from 'moment';\nimport config from '../config';\nimport Card from './movie/Card';\n\nconst TODAY = moment().format('YYYY-MM-DD')\nconst NEXT_WEEK = moment().add(7, 'days').format('YYYY-MM-DD');\n\n// const NEXT_WEKK =\n\nclass Discover extends React.Component {\n\n  constructor (props){\n    super (props);\n\n    this.state = {\n      movies : []\n    }\n\n    this.onClickMovie = this.onClickMovie.bind(this)\n  }\n\n  // Appel à une api (asynchrone)\n  componentDidMount() {\n    // console.log(config.API_KEY) // Ici on importe la clef API contenue dans config.js (CONSTANTE)\n    const url = `http://api.themoviedb.org/3/discover/movie?primary_release_date.gte=${TODAY}&primary_release_date.lte=${NEXT_WEEK}&${config.API_KEY}`;\n    fetch(url)\n      .then (res => res.json())\n      .then (data => {\n        console.log(\"data\",data)\n    \n        this.setState({\n          movies: data.results\n        })\n      });\n  }\n\n  onClickMovie(movieId) {\n    // console.log(\"<< onClickMovie\")\n    console.log(\"onClick Discover moviesId\", movieId)\n\n    this.saveToLocalStorage(movieId)\n  }\n\n  saveToLocalStorage(movieId) {\n    // console.log(\">>saveToLocalStorage\")\n    // console.log(\"movieId\", movieId)\n    \n    //Récupérer les films contenu dans le localstorage\n    const storageStr = localStorage.getItem('myList');\n    let myList = [];\n    if (storageStr !== null) {\n      myList = JSON.parse(storageStr);\n    }\n    // On ajoute le movie dans l'array uniquement si il n'y est pas déjà\n    if (myList.includes(movieId) === false) {\n      myList.push(movieId);\n    } \n    // Pour sauvegarder cette liste dans la totalité de l'application (App), on le stocke dans le local storage\n    localStorage.setItem(\"myList\", JSON.stringify(myList))\n  }\n\n  render() {\n    return(\n      <div className=\"container\">\n        <div className=\"row\">\n          {this.state.movies.map((movie, index) => {\n            // console.log(movie)\n            return(\n              <div key={movie.id} className=\"col-2\"> \n                  <Card \n                    movie={movie} // On fait passer le movie en entier pour pouvoir récupérer tout l'objet\n                    onClick={this.onClickMovie}\n                  />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Discover;","import React from 'react';\nimport Card from '../components/movie/Card';\nimport config from '../config';\nimport vs from '../vs.png';\nimport './Popular.css'\n\nclass Popular extends React.Component {\n\n  constructor (props) {\n    super (props);\n\n    this.state = {\n      movies: [],\n      currentMovie: 0,\n    }\n\n    this.onClickMovie = this.onClickMovie.bind(this);\n  }\n\n  // Appel à une api (asynchrone)\n  componentDidMount() {\n    // console.log(config.API_KEY) // Ici on importe la clef API contenue dans config.js (CONSTANTE)\n    const url = `https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&${config.API_KEY}`;\n    fetch(url)\n      .then (res => res.json())\n      .then (data => {\n        // console.log(\"data\",data.results)\n    \n        this.setState({\n          movies: data.results\n        })\n      });\n  }\n\n  onClickMovie(movieId) {\n\n    // 1) Incrémentation du currentMovie de 2 à chaque click\n    // console.log(\">>onClickMovie\")\n    console.log(\"onClickMovie moviesId\", movieId)\n    const currentMovie = this.state.currentMovie + 2\n\n    this.setState({\n      currentMovie\n    });\n\n    // 2) Je lance la fonction this.saveToLocalStorage qui va effectuer une autre action\n    this.saveToLocalStorage(movieId)\n    // console.log(\"currentMovie\", currentMovie)\n  }\n\n  saveToLocalStorage(movieId) {\n    // console.log(\">>saveToLocalStorage\")\n    // console.log(\"movieId\", movieId)\n    \n    //Récupérer les films contenu dans le localstorage\n    const storageStr = localStorage.getItem('myList');\n    let myList = [];\n    if (storageStr !== null) {\n      myList = JSON.parse(storageStr);\n    }\n    // On ajoute le movie dans l'array uniquement si il n'y est pas déjà\n    if (myList.includes(movieId) === false) {\n      myList.push(movieId);\n    } \n    // Pour sauvegarder cette liste dans la totalité de l'application (App), on le stocke dans le local storage\n    localStorage.setItem(\"myList\", JSON.stringify(myList))\n  }\n\n\n\n  render() {\n    // console.log(\"this.state.movies\", this.state.movies)\n    let displayedMov = this.state.movies.slice((this.state.currentMovie),(this.state.currentMovie + 2))\n    // console.log(\"displayedMov\", displayedMov)\n\n    return(\n      <div className=\"container\">\n        <div className=\"row\">\n          <img src={`${vs}`} className=\"img-vs\" alt=\"vs\"/>\n          {displayedMov.map((movie, index) => {\n            // console.log(movie)\n            return(\n              <div key={movie.id} className=\"col-5 offset-1\"> \n                  <Card \n                    movie={movie} // On fait passer le movie en entier pour pouvoir récupérer tout l'objet\n                    onClick={this.onClickMovie}\n                  />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Popular;","import React from 'react';\nimport config from '../config';\nimport Card from './movie/Card';\n\nclass MyList extends React.Component{\n\n  constructor (props) {\n    super (props);\n\n    this.state = {\n      moviesList: [],\n      listOfIds : this.getFromLocalStorage(),\n    };\n\n    this.onClickCard = this.onClickCard.bind(this)\n  }\n\n  componentDidMount() {\n\n    this.getFromLocalStorage();\n    // console.log('this.state.listOfIds', this.state.listOfIds);\n\n    //On définit notre constante qui va récupérer les promesses. MovieId est définit ici. Il représente l'id de 1 seul movie.\n    const fetchMovie = (movieId) => fetch(`http://api.themoviedb.org/3/movie/${movieId}?${config.API_KEY}`)\n    .then(res => res.json())\n    .then(data => data);\n\n    // Promise all active le fetch qui va chercher les données et les retourne dans le then. Dans le then, je définit une nouvelle variable qui va recevoir les infos du fetch\n    Promise.all(this.state.listOfIds.map(movieId => fetchMovie(movieId)))\n    .then((moviesList) => {\n      // receives an array of responses\n      moviesList.forEach(movieId => {\n        // console.log('<< promiseAll movieId', movieId);\n        // console.log(\"<< moviesList\", moviesList)\n        this.setState ({\n          moviesList\n        })\n      });  \n    });\n  }\n\n  // Méthode pour récupérer la liste stockée dans le local storage\n  getFromLocalStorage() {\n    let listOfIds = localStorage.getItem('myList');\n    listOfIds = JSON.parse(listOfIds);\n    console.log(\">> getFromlocalStorage listOfIds\",listOfIds);\n    return listOfIds\n  }\n\n  onClickCard (movieId) {\n    // console.log(\"<< onClickCard\")\n    console.log(\"movieId onClick MyList\", movieId)\n    // console.log(\"moviesList onClick\", this.state.moviesList)\n    \n    // Je filtre le tableau listOfIds. Chaque élément du tableau est une ID. Je compare l'Id et le movieId.\n    const filteredItems = this.state.listOfIds.filter(Id => Id !== movieId)\n    this.setState ({\n      listOfIds : filteredItems\n    })\n\n    // J'applique la méthode filter sur le tableau d'objets moviesList. Cette méthode retourne un film du tableau. \n    // Pour chaque film, je compare l'id de ce film avec l'Id du movie cliqué. \n    // On retourne un tableau contenant les éléments !== (possible de retourner 1 élément avec ===)\n    const filteredMovies = this.state.moviesList.filter(movie => movie.id !== movieId)\n    this.setState ({\n      moviesList : filteredMovies\n    })\n\n    //Je réécris le local storage avec le nouveau tableau, qui doit être stringifié\n    localStorage.setItem(\"myList\", JSON.stringify(this.state.listOfIds));\n    console.log(localStorage)\n  }\n\n  render(){\n    // console.log(\"this.state\", this.state)\n    console.log(\"moviesList in MyListrender\", this.state.moviesList)\n    console.log(\"listOfIds in MyListrender\", this.state.listOfIds)\n    return(\n      <div className=\"container\">\n        <div className=\"row\">\n          {this.state.moviesList.map((movie, index) => {\n            return(\n              <div key={movie.id} className=\"col-3\"> \n                  <Card \n                    movie={movie} // On fait passer le movie en entier pour pouvoir récupérer tout l'objet\n                    onClick = {this.onClickCard}\n                  />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default MyList;","import React from 'react';\nimport {BrowserRouter as Router, Route, Link} from \"react-router-dom\"; // As Router permet de simplifier l'écriture\nimport Discover from \"./components/Discover\";\nimport Popular from \"./components/Popular\";\nimport MyList from \"./components/MyList\";\nimport \"./bootstrap.min.css\";\nimport \"./App.css\";\nimport pop2 from \"./pop2.png\"\n\nclass App extends React.Component {\n\n  render() {\n    return(\n      <Router>\n        <div className=\"global-heigh\">\n        <h1 className=\"logo-mooviz\">Mooviz</h1>\n          <div className=\"colored\"></div>\n          {/* <i class=\"fas fa-film logo\"></i> */}\n          <nav>\n            <ul className=\"nav justify-content-center\">\n              <li className=\"nav-item\"><Link className=\"nav-link active\" to=\"/\">Discover</Link></li>\n              <li className=\"nav-item\"><Link className=\"nav-link active\" to=\"/popular/\">Movie Battle</Link></li>\n              <li className=\"nav-item\"><Link className=\"nav-link active\" to=\"/my-list\">My list <i className=\"far fa-heart\"></i></Link></li>\n            </ul>\n          </nav>\n          <Route path=\"/\" exact component={Discover}/>\n          <Route path=\"/popular/\" component={Popular}/>\n          <Route path=\"/my-list/\" component={MyList}/>\n        </div>\n        <img src={`${pop2}`} className=\"img-float2\" alt=\"pop\"/>\n        <div className=\"colored-bottom\"></div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}